services:
  myapp:
    build:
      context: .
      dockerfile: build/Dockerfile
    container_name: myapp
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=production
    depends_on:
      - postgres
      - redis
    # networks:
    #   - backend
  postgres:
    image: postgres:10
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_HOST_AUTH_METHOD: trust
    # networks:
    #   - backend
    ports:
      - "54321:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-your_secure_password_here}
    # networks:
    #   - backend
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    # env_file:
    #   - .env
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

# networks:
#   backend:
#     driver: bridge

volumes:
  pgdata:
  redisdata: