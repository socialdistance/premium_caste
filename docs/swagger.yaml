definitions:
  dto.UserRegisterInput:
    properties:
      email:
        type: string
      is_admin:
        type: boolean
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
      phone:
        description: Формат +71234567890
        type: string
    required:
    - email
    - name
    - password
    - phone
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  response.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
      status:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/users/{user_id}/is-admin:
    get:
      consumes:
      - application/json
      description: Проверяет, является ли указанный пользователь администратором
      parameters:
      - description: UUID пользователя
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Результат проверки" example({"is_admin": true})'
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: 'Невалидный UUID" example({"error": "invalid user ID format"})'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Ошибка сервера" example({"error": "failed to check admin status"})'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Проверка административного статуса пользователя
      tags:
      - Users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Вход в систему по email и паролю. Возвращает JWT-токен.
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход (токен)
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Ошибка аутентификации
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создание аккаунта. Возвращает ID пользователя.
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Успешная регистрация
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  properties:
                    user_id:
                      type: string
                  type: object
              type: object
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
swagger: "2.0"
