services:
  myapp:
    build:
      context: .
      dockerfile: build/Dockerfile
    container_name: myapp
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=production
    depends_on:
      - postgres
      - redis
  postgres:
    image: postgres:10
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: postgres
    ports:
      - "54321:5432"
    volumes:
      - ./migrations/init/initdb.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d premium_caste"]
      interval: 5s
      timeout: 5s
      retries: 5
  migrations:
    build: 
      context: .
      dockerfile: build/Dockerfile.migrations
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "echo 'DB: ${POSTGRES_DB:-premium_caste}'; 
      until pg_isready -h postgres -p 5432 -U ${POSTGRES_USER:-postgres}; do 
      sleep 2; done;
      goose -dir /migrations postgres 'user=${POSTGRES_USER:-postgres} password=${POSTGRES_PASSWORD:-postgres} 
      host=postgres port=5432 dbname=${POSTGRES_DB:-premium_caste} sslmode=disable' up"
  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-your_secure_password_here}
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your_secure_password_here}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

volumes:
  redisdata: